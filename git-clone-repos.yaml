---
- name: Playbook that setup's the repositories of an organisation for the User in local.

  hosts: localhost
  vars:
    ORG: "{{ lookup('env', 'ORG') | default('thoth-station', true) }}"
    DIR_PATH: "{{ lookup('env', 'DIR_PATH') | default('thoth-station', true) }}"
    REPOS: "{{ lookup('env', 'REPOS') }}"
    GITHUB_TOKEN: "{{ lookup('env', 'GITHUB_TOKEN') }}"
    GITHUB_USER: "{{ lookup('env', 'GITHUB_USER') }}"
    GIT_HOOKS_REPO: "{{ lookup('env', 'GIT_HOOKS_REPO') | default('core', true) }}"
    NO_GIT_HOOKS: "{{ lookup('env', 'NO_GIT_HOOKS') }}"
    NO_PIPENV_SETUP: "{{ lookup('env', 'NO_PIPENV_SETUP') }}"

  gather_facts: false
  connection: local
  tasks:
    - name: Fetching repositories from {{ ORG }}
      uri:
        url: https://api.github.com/orgs/{{ ORG }}/repos?per_page=100
        return_content: yes
      register: repo_list
      when: REPOS == ""

    - set_fact:
        REPOS: "{{ repo_list.json | map(attribute='name') | list }}"
      when: REPOS == ""

    - name: Forking repositories from {{ ORG }}
      uri:
        url:  https://api.github.com/repos/{{ ORG }}/{{ item }}/forks?access_token={{ GITHUB_TOKEN }}
        method: POST
        return_content: yes
        status_code: 202
      no_log: true
      ignore_errors: true
      with_items: "{{ REPOS }}"
      when: GITHUB_TOKEN != ""
    - debug:
        msg:
          - "Please pass your GITHUB_TOKEN for FORKING the Repositories"
      when: GITHUB_TOKEN == ""

    - name: Cloning repositories from {{ ORG }}
      git:
        repo: "git@github.com:{{ ORG }}/{{ item }}.git"
        version: master
        dest: "~/{{ DIR_PATH }}/{{ item }}"
      no_log: true
      with_items: "{{ REPOS }}"

    - name: Setting up the Remote
      shell: |
        cd ~/{{ DIR_PATH }}/{{ item }}
        git remote rename origin upstream
        git remote add origin git@github.com:{{ GITHUB_USER }}/{{ item }}.git
      ignore_errors: true
      no_log: true
      with_items: "{{ REPOS }}"
      when: GITHUB_USER != ""
    - debug:
        msg:
        - "Please pass your GITHUB_USER for setting up the Remote for all the Repositories"
      when: GITHUB_USER == ""

    - name: Setting up the pre-commit Git hook
      synchronize:
        src: "~/{{ DIR_PATH }}/{{ GIT_HOOKS_REPO }}/.git_init/hooks/pre-commit"
        dest: "~/{{ DIR_PATH }}/{{ item }}/.git/hooks/"
        mode: pull
      ignore_errors: true
      no_log: true
      with_items:
        - "{{ REPOS }}"
      when: NO_GIT_HOOKS != '1'
    - name: Checking for the file setup.py
      stat:
        path: "~/{{ DIR_PATH }}/{{ item }}/setup.py"
      ignore_errors: true
      no_log: true
      register: file_details
      with_items:
        - "{{ REPOS }}"
      when: NO_GIT_HOOKS != '1'
    - name: Setting up the pre-push Git hook
      synchronize:
        src: "~/{{ DIR_PATH }}/{{ GIT_HOOKS_REPO }}/.git_init/hooks/pre-push"
        dest: "~/{{ DIR_PATH }}/{{ item.1 }}/.git/hooks/"
        mode: pull
      ignore_errors: true
      no_log: true
      with_together:
        - "{{ file_details.results }}"
        - "{{ REPOS }}"
      when: NO_GIT_HOOKS != '1' and item.0.stat.exists

    - name: Checking if pipenv package is installed
      command: which pipenv
      register: pipenv_check
      ignore_errors: true
      no_log: true
      when: NO_PIPENV_SETUP != '1'
    - name: Installing pipenv package
      debug:
        msg:
          - " pipenv python packages is not installed"
          - " Use command 'sudo pip3 install pipenv' to install pipenv"
      when: NO_PIPENV_SETUP != '1' and pipenv_check.stdout == ""

    - name: Checking for the file Pipfile
      stat:
        path: "~/{{ DIR_PATH }}/{{ item }}/Pipfile"
      ignore_errors: true
      no_log: true
      register: pipenv_details
      with_items:
        - "{{ REPOS }}"
      when: NO_PIPENV_SETUP != '1' and pipenv_check.stdout != ""

    - name: Setting up the pipenv
      shell: |
        cd "~/{{ DIR_PATH }}/{{ item }}"
        pipenv install --dev
      ignore_errors: true
      no_log: true
      with_items:
        - "{{ pipenv_details.results }}"
      when: NO_PIPENV_SETUP != '1' and pipenv_check.stdout != ""

    - name: Setup completed Successfully.
      debug:
        msg:
        - "Cloned Repositories are now ready for use!"
        - "You will find the repositories in: ~/{{ DIR_PATH }}"
