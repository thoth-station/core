apiVersion: v1
kind: Template
labels:
  template: thoth-core
metadata:
  name: thoth-core
  annotations:
    description: thoth-core

objects:
#
# Secrets
#
- apiVersion: v1
  kind: Secret
  metadata:
    name: secret
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  stringData:
    app-secret-key: some-secret-key

- apiVersion: v1
  kind: Secret
  metadata:
    name: secret
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  stringData:
    thoth-secret: ${THOTH_SECRET}

- apiVersion: v1
  kind: Secret
  metadata:
    name: ceph-secrets
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  stringData: &ceph_secrets
    ceph-key-id: ${THOTH_CEPH_KEY_ID}
    ceph-secret-key: ${THOTH_CEPH_SECRET_KEY}

- apiVersion: v1
  kind: Secret
  metadata:
    name: ceph-secrets
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  stringData:
    <<: *ceph_secrets

- apiVersion: v1
  kind: Secret
  metadata:
    name: ceph-secrets
    namespace: ${THOTH_BACKEND_NAMESPACE}
  stringData:
    <<: *ceph_secrets

#
# Network restriction for analyzer containers.
#
# TODO: as this does not work on `oc cluter up`, this needs to be configured on actual deployment:
#   https://blog.openshift.com/whats-new-in-openshift-3-5-network-policy-tech-preview/
#   https://bugzilla.redhat.com/show_bug.cgi?id=1444144
#- apiVersion: extensions/v1beta1
#  kind: NetworkPolicy
#  metadata:
#    name: restricted-network-for-analyzer
#  spec:
#   podSelector:
#     matchLabels:
#       role: analyzer-container
#   # TODO: whitelist supported registries to pull images from
#   ingress:
#   - {}
#   egress:
#   - {}

#
# Namespace quotas
#
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: mem-cpu-resource-quota
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    hard:
      requests.cpu: ${THOTH_MIDDLEEND_CPU_REQUEST}
      requests.memory: ${THOTH_MIDDLEEND_MEMORY_REQUEST}
      limits.cpu: ${THOTH_MIDDLEEND_CPU_LIMIT}
      limits.memory: ${THOTH_MIDDLEEND_MEMORY_LIMIT}

- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: mem-cpu-resource-quota
    namespace: ${THOTH_BACKEND_NAMESPACE}
  spec:
    hard:
      requests.cpu: ${THOTH_BACKEND_CPU_REQUEST}
      requests.memory: ${THOTH_BACKEND_MEMORY_REQUEST}
      limits.cpu: ${THOTH_BACKEND_CPU_LIMIT}
      limits.memory: ${THOTH_BACKEND_MEMORY_LIMIT}
#
# Services
#
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      service: thoth-user-api
    name: thoth-user-api
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      service: thoth-user-api

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      service: thoth-result-api
    name: thoth-result-api
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      service: thoth-result-api
    containers:
        - env:
          - name: THOTH_RESULT_API_HOSTNAME
            value: ${THOTH_RESULT_API_HOSTNAME}
          - name: THOTH_DEPLOYMENT_NAME
            value: ${THOTH_DEPLOYMENT_NAME}
          - name: THOTH_CEPH_HOST
            value: ${THOTH_CEPH_HOST}
          - name: THOTH_CEPH_BUCKET
            value: ${THOTH_CEPH_BUCKET}
          - name: THOTH_CEPH_BUCKET_PREFIX
            value: ${THOTH_CEPH_BUCKET_PREFIX}
          - name: THOTH_CEPH_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-key-id
          - name: THOTH_CEPH_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-secret-key

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: graphexp
      service: graphexp
    name: graphexp
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      service: graphexp

#
# Routes
#
- apiVersion: v1
  kind: Route
  metadata:
    name: thoth-user-api-hostname
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    host: ${THOTH_USER_API_HOSTNAME}
    to:
      kind: Service
      name: thoth-user-api

- apiVersion: v1
  kind: Route
  metadata:
    name: graphexp-hostname
    labels:
      app: graphexp
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    host:
    to:
      kind: Service
      name: graphexp

#
# Service accounts
#
- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: role-jobs-binding
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: edit
  subjects:
    - kind: ServiceAccount
      name: master-access
      namespace: ${THOTH_FRONTEND_NAMESPACE}

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: master-access
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  automountServiceAccountToken: true

- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: role-jobs-binding
    namespace: ${THOTH_BACKEND_NAMESPACE}
  roleRef:
    kind: ClusterRole
    name: edit
  subjects:
    - kind: ServiceAccount
      name: master-access
      namespace: ${THOTH_FRONTEND_NAMESPACE}

#
# Deployment configs
#
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: thoth-user-api
    name: thoth-user-api
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    replicas: 1
    selector:
      service: thoth-user-api
    template:
      metadata:
        labels:
          service: thoth-user-api
      spec:
        serviceAccountName: master-access
        containers:
        - env:
          - name: APP_SERVICE_PORT
            value: "8080"
          - name: KUBERNETES_API_URL
            value: ${KUBERNETES_API_URL}
          - name: KUBERNETES_VERIFY_TLS
            value: ${KUBERNETES_VERIFY_TLS}
          - name: THOTH_BACKEND_NAMESPACE
            value: ${THOTH_BACKEND_NAMESPACE}
          - name: THOTH_MIDDLEEND_NAMESPACE
            value: ${THOTH_MIDDLEEND_NAMESPACE}
          - name: THOTH_RESULT_API_HOSTNAME
            value: ${THOTH_RESULT_API_HOSTNAME}
          - name: THOTH_RESULT_API_URL
            value: http://thoth-result-api-hostname-${THOTH_MIDDLEEND_NAMESPACE}.${THOTH_ROUTING_SUFFIX}
          - name: THOTH_MIDDLEEND_POD_CPU_LIMIT
            value: ${THOTH_MIDDLEEND_POD_CPU_LIMIT}
          - name: THOTH_MIDDLEEND_POD_MEMORY_LIMIT
            value: ${THOTH_MIDDLEEND_POD_MEMORY_LIMIT}
          - name: THOTH_BUILDLOGS_PERSISTENT_VOLUME_PATH
            value: /buildlogs
          - name: THOTH_DEPLOYMENT_NAME
            value: ${THOTH_DEPLOYMENT_NAME}
          - name: THOTH_CEPH_HOST
            value: ${THOTH_CEPH_HOST}
          - name: THOTH_CEPH_BUCKET
            value: ${THOTH_CEPH_BUCKET}
          - name: THOTH_CEPH_BUCKET_PREFIX
            value: ${THOTH_CEPH_BUCKET_PREFIX}
          - name: THOTH_SECRET
            valueFrom:
              secretKeyRef:
                name: secret
                key: thoth-secret
          - name: THOTH_JANUSGRAPH_HOST
            value: janusgraph-hostname-${THOTH_MIDDLEEND_NAMESPACE}.${THOTH_ROUTING_SUFFIX}
          - name: THOTH_JANUSGRAPH_PORT
            value: '80'
          - name: THOTH_USER_API_APP_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: secret
                key: app-secret-key
          - name: THOTH_CEPH_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-key-id
          - name: THOTH_CEPH_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-secret-key
          name: thoth-user-api
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: '/readiness'
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: '/liveness'
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10
          volumeMounts:
            - mountPath: /buildlogs
              name: pv-buildlogs
        restartPolicy: Always
        volumes:
          - name: pv-buildlogs
            persistentVolumeClaim:
              claimName: claim2
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - thoth-user-api
        from:
          kind: ImageStreamTag
          name: 'thoth-user-api:latest'

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: thoth-result-api
    name: thoth-result-api
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    replicas: 1
    selector:
      service: thoth-result-api
    template:
      metadata:
        labels:
          service: thoth-result-api
      spec:
        containers:
        - env:
          - name: THOTH_PERSISTENT_VOLUME_PATH
            value: /results
          - name: THOTH_DEPLOYMENT_NAME
            value: ${THOTH_DEPLOYMENT_NAME}
          - name: THOTH_CEPH_HOST
            value: ${THOTH_CEPH_HOST}
          - name: THOTH_CEPH_BUCKET
            value: ${THOTH_CEPH_BUCKET}
          - name: THOTH_CEPH_BUCKET_PREFIX
            value: ${THOTH_CEPH_BUCKET_PREFIX}
          - name: THOTH_CEPH_KEY_ID
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-key-id
          - name: THOTH_CEPH_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: ceph-secrets
                key: ceph-secret-key
          name: thoth-result-api
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: '/readiness'
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: '/liveness'
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 10
          volumeMounts:
            - mountPath: /results
              name: pv-analyzes
        restartPolicy: Always
        volumes:
          - name: pv-analyzes
            persistentVolumeClaim:
              claimName: claim1
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - thoth-result-api
        from:
          kind: ImageStreamTag
          name: 'thoth-result-api:latest'

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: graphexp
      app: graphexp
    name: graphexp
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    replicas: 1
    selector:
      service: graphexp
    template:
      metadata:
        labels:
          service: graphexp
      spec:
        containers:
        - name: thoth-graphexp
          image: thoth-graphexp
          env:
            - name: THOTH_JANUSGRAPH_HOST
              value: janusgraph-hostname-${THOTH_MIDDLEEND_NAMESPACE}.${THOTH_ROUTING_SUFFIX}
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
        restartPolicy: Always
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
          - thoth-graphexp
        from:
          kind: ImageStreamTag
          name: 'thoth-graphexp:latest'

#
# Persistent volume claims
#
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: claim1
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: claim2
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 16Gi

#
# Cron jobs
#
- apiVersion: batch/v2alpha1
  kind: CronJob
  metadata:
    name: thoth-cleanup-job
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    #schedule: "@weekly"
    schedule: "*/1 * * * *"
    jobTemplate:
      spec:
        template:
          spec:
            serviceAccountName: master-access
            containers:
            - image: fridex/thoth-cleanup-job
              name: thoth-cleanup-job
              env:
               - name: KUBERNETES_VERIFY_TLS
                 value: ${KUBERNETES_VERIFY_TLS}
               - name: THOTH_MIDDLEEND_NAMESPACE
                 value: ${THOTH_MIDDLEEND_NAMESPACE}
               - name: THOTH_ANALYZER_CLEANUP_TIME
                 value: ${THOTH_ANALYZER_CLEANUP_TIME}
               - name: KUBERNETES_API_URL
                 value: ${KUBERNETES_API_URL}
               - name: THOTH_CLEANUP_DEBUG
                 value: ${THOTH_CLEANUP_DEBUG}
              resources:
                requests:
                  memory: "32Mi"
                  cpu: "100m"
                limits:
                  memory: "128Mi"
                  cpu: "250m"
            restartPolicy: OnFailure

- apiVersion: batch/v2alpha1
  kind: CronJob
  metadata:
    name: thoth-graph-sync-job
    namespace: ${THOTH_BACKEND_NAMESPACE}
  spec:
    schedule: "@weekly"
    #schedule: "*/1 * * * *"
    jobTemplate:
      spec:
        template:
          spec:
            containers:
            - image: fridex/thoth-graph-sync-job
              name: thoth-graph-sync-job
              env:
              - name: THOTH_JANUSGRAPH_HOST
                value: janusgraph-hostname-${THOTH_MIDDLEEND_NAMESPACE}.${THOTH_ROUTING_SUFFIX}
              - name: THOTH_JANUSGRAPH_PORT
                value: '80'
              - name: THOTH_SYNC_OBSERVATIONS
                value: ${THOTH_SYNC_OBSERVATIONS}
              - name: THOTH_DEPLOYMENT_NAME
                value: ${THOTH_DEPLOYMENT_NAME}
              - name: THOTH_CEPH_HOST
                value: ${THOTH_CEPH_HOST}
              - name: THOTH_CEPH_BUCKET
                value: ${THOTH_CEPH_BUCKET}
              - name: THOTH_CEPH_BUCKET_PREFIX
                value: ${THOTH_CEPH_BUCKET_PREFIX}
              - name: THOTH_CEPH_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: ceph-secrets
                    key: ceph-key-id
              - name: THOTH_CEPH_SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    name: ceph-secrets
                    key: ceph-secret-key
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "125m"
                limits:
                  memory: "256Mi"
                  cpu: "500m"
            restartPolicy: Never

#
# Image streams
#
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: python
    annotations:
      openshift.io/display-name: Python
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    tags:
      - name: "3.6"
        annotations:
          iconClass: icon-python
          supports: python:3.6,python
          version: "3.6"
        from:
          kind: DockerImage
          name: docker.io/centos/python-36-centos7:latest

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: python
    annotations:
      openshift.io/display-name: Python
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    tags:
      - name: "3.6"
        annotations:
          iconClass: icon-python
          supports: python:3.6,python
          version: "3.6"
        from:
          kind: DockerImage
          name: docker.io/centos/python-36-centos7:latest

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
    name: thoth-result-api
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    name: latest

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
    name: thoth-user-api
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    name: latest

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
    name: thoth-graphexp
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    name: latest

#
# Build configs
#
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: thoth-user-api
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: thoth-user-api:latest
    source:
      git:
        # TODO:
        uri: ${THOTH_USER_API_GIT_URL}
      secrets: []
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
      type: Source
    triggers:
    - github:
        secret: ${THOTH_USER_API_GITHUB_SECRET}
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: thoth-result-api
    namespace: ${THOTH_MIDDLEEND_NAMESPACE}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: thoth-result-api:latest
    source:
      git:
        uri: ${THOTH_RESULT_API_GIT_URL}
      secrets: []
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
      type: Source
    triggers:
    - github:
        secret: ${THOTH_RESULT_API_GITHUB_SECRET}
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    name: thoth-graphexp
    labels:
      app: graphexp
    namespace: ${THOTH_FRONTEND_NAMESPACE}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: thoth-graphexp:latest
    source:
      git:
        # TODO:
        uri: https://github.com/fridex/thoth-graphexp
      secrets: []
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.6
      type: Source
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

parameters:
- description: A hostname where the Thoth API should be exposed (will be auto-generated if empty).
  displayName: Thoth user API hostname
  required: false
  name: THOTH_USER_API_HOSTNAME

- description: A hostname where the result API should be exposed (will be auto-generated if empty).
  displayName: Thoth result API hostname
  required: false
  name: THOTH_RESULT_API_HOSTNAME

- description: A hostname where the analyzers should post results to.
  displayName: Thoth result API hostname
  required: true
  name: THOTH_RESULT_API_HOSTNAME
  value: thoth-result-api

- description: Kubernetes API URL in base format (without API path).
  displayName: Kubernetes base API URL
  required: true
  name: KUBERNETES_API_URL
  # This value should be OK inside the cluster as this is exposed to all contianers running inside the OpenShift cluster.
  value: 'https://kubernetes.default.svc.cluster.local'

- description: A name for Thoth frontend namespace.
  displayName: Thoth frontend namespace
  required: true
  name: THOTH_FRONTEND_NAMESPACE
  value: 'thoth-frontend'

- description: A name for Thoth middleend namespace.
  displayName: Thoth middleend namespace
  required: true
  name: THOTH_MIDDLEEND_NAMESPACE
  value: 'thoth-middleend'

- description: A name for Thoth backend namespace.
  displayName: Thoth backend namespace
  required: true
  name: THOTH_BACKEND_NAMESPACE
  value: 'thoth-backend'

- description: Admin user for the Thoth project.
  displayName: Thoth admin
  required: true
  name: THOTH_ADMIN_USER
  value: 'developer'

- description: Description for frontend part of Thoth core
  displayName: Description of Thoth core frontend
  required: true
  name: THOTH_FRONTEND_DESCRIPTION
  value: 'Frontend part of Thoth core'

- description: Name of Thoth core frontend
  displayName: Thoth core frontend name
  required: true
  name: THOTH_FRONTEND_DISPLAYNAME
  value: 'Thoth core frontend'

- description: Description for middleend part of Thoth core
  displayName: Description of Thoth core middleend
  required: true
  name: THOTH_MIDDLEEND_DESCRIPTION
  value: 'Middleend part of Thoth core'

- description: Name of Thoth core middleend
  displayName: Thoth core middleend name
  required: true
  name: THOTH_MIDDLEEND_DISPLAYNAME
  value: 'Thoth core backend'

- description: Description for backend part of Thoth core
  displayName: Description of Thoth core backend
  required: true
  name: THOTH_BACKEND_DESCRIPTION
  value: 'Backend part of Thoth core'

- description: Name of Thoth core backend
  displayName: Thoth core backend name
  required: true
  name: THOTH_BACKEND_DISPLAYNAME
  value: 'Thoth core backend'

- description: Namespace CPU request for running pods in Thoth middleend
  displayName: Thoth middleend CPU request
  required: true
  name: THOTH_MIDDLEEND_CPU_REQUEST
  value: '0.5'

- description: Namespace Memory request for running pods in Thoth middleend
  displayName: Thoth middleend memory request
  required: true
  name: THOTH_MIDDLEEND_MEMORY_REQUEST
  value: '0.5Gi'

- description: Namespace CPU limit for all pods running in Thoth middleend
  displayName: Thoth middleend CPU limit
  required: true
  name: THOTH_MIDDLEEND_CPU_LIMIT
  value: '4'

- description: Namespace memory limit for all pods running in Thoth middleend
  displayName: Thoth middleend memory limit
  required: true
  name: THOTH_MIDDLEEND_MEMORY_LIMIT
  value: '8Gi'

- description: Namespace CPU request for running pods in Thoth backend
  displayName: Thoth backend CPU request
  required: true
  name: THOTH_BACKEND_CPU_REQUEST
  value: '0.5'

- description: Namespace memory request for running pods in Thoth backend
  displayName: Thoth backend memory request
  required: true
  name: THOTH_BACKEND_MEMORY_REQUEST
  value: '0.5Gi'

- description: Namespace CPU limit for all pods running in Thoth backend
  displayName: Thoth backend CPU limit
  required: true
  name: THOTH_BACKEND_CPU_LIMIT
  value: '4'

- description: Namespace memory limit for all pods running in Thoth backend
  displayName: Thoth middleend memory limit
  required: true
  name: THOTH_BACKEND_MEMORY_LIMIT
  value: '8Gi'

- description: Git repository for Thoth's result API
  displayName: Thoth result-api Git
  required: true
  name: THOTH_RESULT_API_GIT_URL
  value: 'https://github.com/fridex/thoth-result-api'

- description: Git repository for Thoth's user-facing API
  displayName: Thoth user-api Git
  required: true
  name: THOTH_USER_API_GIT_URL
  value: 'https://github.com/fridex/thoth-user-api'

- description: A secret for build user-facing API triggered by GitHub
  displayName: GitHub Webhook secret for user-facing API
  required: true
  # see: https://docs.openshift.com/container-platform/3.6/dev_guide/builds/triggering_builds.html#github-webhooks
  name: THOTH_USER_API_GITHUB_SECRET
  value: 'secret101'

- description: A secret for build result API triggered by GitHub
  displayName: GitHub Webhook secret for result API
  required: true
  name: THOTH_RESULT_API_GITHUB_SECRET
  value: 'secret101'

- description: Memory limit set for pods spawned by user-facing API in middleend
  displayName: Middleend pod memory limit
  required: true
  name: THOTH_MIDDLEEND_POD_MEMORY_LIMIT
  value: '0.5Gi'

- description: CPU limit set for pods spawned by user-facing API in middleend
  displayName: Middleend pod CPU limit
  required: true
  name: THOTH_MIDDLEEND_POD_CPU_LIMIT
  value: '0.5'

- description: Time before analyzer pod gets removed from etcd.
  displayName: Thoth analyzer cleanup time
  required: true
  name: THOTH_ANALYZER_CLEANUP_TIME
  value: '7d'

- description: Be verbose in cluster cleanup job.
  displayName: Debug cleanup job
  required: true
  name: THOTH_CLEANUP_DEBUG
  value: '1'

- description: Turn on or off automatic observation syncing to the graph database.
  displayName: Sync observations
  required: true
  name: THOTH_SYNC_OBSERVATIONS
  value: '0'

- description: Name of bucket where results are stored to.
  displayName: Ceph bucket name
  required: true
  name: THOTH_CEPH_BUCKET
  value: 'DH-DEV-DATA'

- description: Thoth Ceph bucket prefix.
  displayName: Thoth Ceph bucket prefix
  required: true
  name: THOTH_CEPH_BUCKET_PREFIX
  value: 'data/thoth'

- description: Verify TLS certificates of Kubernetes master on requests.
  displayName: Verify Kubernetes TLS
  required: true
  name: KUBERNETES_VERIFY_TLS
  value: '0'

# These are required parameters to be supplied on deployment.

- description: Secret to interact with Thoth endpoints that require higher privileges.
  displayName: Thoth secret
  required: true
  name: THOTH_SECRET

- description: Routing suffix of deployment.
  displayName: Routing suffix
  required: true
  name: THOTH_ROUTING_SUFFIX

- description: Thoth deployment name.
  displayName: Deployment name
  required: true
  name: THOTH_DEPLOYMENT_NAME

- description: A host (with port) where Ceph endpoint can be used to store/retrieve data.
  displayName: Ceph host
  required: true
  name: THOTH_CEPH_HOST

- description: Access key id for Ceph connection.
  displayName: Ceph access key id
  required: true
  name: THOTH_CEPH_KEY_ID

- description: Secret key for Ceph connection.
  displayName: Ceph secret key
  required: true
  name: THOTH_CEPH_SECRET_KEY
